{"remainingRequest":"/Users/mschultz/.nvm/versions/node/v12.4.0/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mschultz/vue-zingchart/ZingChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mschultz/vue-zingchart/ZingChart.vue","mtime":1568953608830},{"path":"/Users/mschultz/.nvm/versions/node/v12.4.0/lib/node_modules/@vue/cli-service-global/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mschultz/.nvm/versions/node/v12.4.0/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mschultz/.nvm/versions/node/v12.4.0/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n\n\n// Import the zingchart library to be used globally.\n\nimport 'zingchart';\n\n// One time setup globally to handle all vue objects in the app space.\nif(!window.ZCVUE) {\n    window.ZCVUE = {\n        instances: {},\n        count: 0,\n    }\n}\n\n// TOOD: Listen for any global teardown events so we can automatically destroy zingchart Vue destroy.\n\nexport default {\n    data() {\n        return {\n            id: null,\n            instance: null, // The zingchart instance object\n            _config: null,\n            EVENT_NAMES: [\n                'beforedestroy',\n                'click',\n                'complete',\n                'dataparse',\n                'dataready',\n                'destory',\n                'guide_mousemove',\n                'load',\n                'menu_item_click',\n                'resize',\n            ],\n        };\n    }, \n    destroyed() {\n        zingchart.exec(this.id, 'destroy');\n\t},\n    mounted() {\n        // Check the user's properties\n        if(this.$props.config) {\n            this._config = this.$props.config;\n        } else {\n            throw new Error('A config is required to render a chart')\n        }\n\n        if(this.$props.id) {\n            this.id = this.$props.id;\n        } else {\n            this.id = 'zingchart-vue-' + ZCVUE.count++;\n        }\n        // Set the id for zingchart to render to\n        this.$refs.chart.setAttribute('id', this.id);\n\n        // Override the user's config series object if provided. Just a shallow override (no deep merge)\n        if(this.$props.series) {\n           this._config['series'] = this.$props.series;\n        }\n\n        const renderObject = {\n            id: this.id,\n            data: this._config,\n        };\n\n        if(this.$props.width) {\n            renderObject['width'] = this.$props.width;\n        }\n        if(this.$props.height) {\n            renderObject['height'] = this.$props.height;\n        }\n\n        zingchart.render(renderObject);\n\n        // PSEUDO: Check to see if the user provided some known event names. If so, then we register it directly to zingchart to pipe.\n        \n        this.$events.forEach((eventName) => {\n            if(this.EVENT_NAMES.includes(eventName)) {\n                // Filter through the provided events list, then register it to zingchart.\n                zingchart.bind(this.id, property, this.$events[property])\n            }\n        });\n\n    },\n    methods: {\n        // Exposes out methods to the user.\n        addnode(args) { adapterMethod(arguments.callee.name, args) },\n        addplot(args) { adapterMethod(arguments.callee.name, args) },\n        // Catch all\n        method(name, args) { adapterMethod(arguments.callee.name, args)},\n        // Adapter fn to pipe vue to zingchart's methods\n        adapterMethod(fnName, args) {\n            zingchart.exec(this.id, fnName, args);\n        },\n\n    },\n    props: [\n        'config',\n        'series',\n        'id'\n    ],\n    watch: {\n        height: (val) => {\n            zingchart.exec(this.id, 'resize', {\n                height: val,\n                width: this.width,\n            })\n        },\n        width: (newVal, oldVal) => {\n            zingchart.exec(this.id, 'resize', {\n                height: this.height || 500,\n                width: this.width,\n            })\n\n        },\n    },\n\n\n    \n}\n",{"version":3,"sources":["ZingChart.vue"],"names":[],"mappings":";;;;;;;AAOA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA","file":"ZingChart.vue","sourceRoot":"..","sourcesContent":["<template>\n    <div ref=\"chart\"></div>\n</template>\n\n\n<script>\n\n// Import the zingchart library to be used globally.\n\nimport 'zingchart';\n\n// One time setup globally to handle all vue objects in the app space.\nif(!window.ZCVUE) {\n    window.ZCVUE = {\n        instances: {},\n        count: 0,\n    }\n}\n\n// TOOD: Listen for any global teardown events so we can automatically destroy zingchart Vue destroy.\n\nexport default {\n    data() {\n        return {\n            id: null,\n            instance: null, // The zingchart instance object\n            _config: null,\n            EVENT_NAMES: [\n                'beforedestroy',\n                'click',\n                'complete',\n                'dataparse',\n                'dataready',\n                'destory',\n                'guide_mousemove',\n                'load',\n                'menu_item_click',\n                'resize',\n            ],\n        };\n    }, \n    destroyed() {\n        zingchart.exec(this.id, 'destroy');\n\t},\n    mounted() {\n        // Check the user's properties\n        if(this.$props.config) {\n            this._config = this.$props.config;\n        } else {\n            throw new Error('A config is required to render a chart')\n        }\n\n        if(this.$props.id) {\n            this.id = this.$props.id;\n        } else {\n            this.id = 'zingchart-vue-' + ZCVUE.count++;\n        }\n        // Set the id for zingchart to render to\n        this.$refs.chart.setAttribute('id', this.id);\n\n        // Override the user's config series object if provided. Just a shallow override (no deep merge)\n        if(this.$props.series) {\n           this._config['series'] = this.$props.series;\n        }\n\n        const renderObject = {\n            id: this.id,\n            data: this._config,\n        };\n\n        if(this.$props.width) {\n            renderObject['width'] = this.$props.width;\n        }\n        if(this.$props.height) {\n            renderObject['height'] = this.$props.height;\n        }\n\n        zingchart.render(renderObject);\n\n        // PSEUDO: Check to see if the user provided some known event names. If so, then we register it directly to zingchart to pipe.\n        \n        this.$events.forEach((eventName) => {\n            if(this.EVENT_NAMES.includes(eventName)) {\n                // Filter through the provided events list, then register it to zingchart.\n                zingchart.bind(this.id, property, this.$events[property])\n            }\n        });\n\n    },\n    methods: {\n        // Exposes out methods to the user.\n        addnode(args) { adapterMethod(arguments.callee.name, args) },\n        addplot(args) { adapterMethod(arguments.callee.name, args) },\n        // Catch all\n        method(name, args) { adapterMethod(arguments.callee.name, args)},\n        // Adapter fn to pipe vue to zingchart's methods\n        adapterMethod(fnName, args) {\n            zingchart.exec(this.id, fnName, args);\n        },\n\n    },\n    props: [\n        'config',\n        'series',\n        'id'\n    ],\n    watch: {\n        height: (val) => {\n            zingchart.exec(this.id, 'resize', {\n                height: val,\n                width: this.width,\n            })\n        },\n        width: (newVal, oldVal) => {\n            zingchart.exec(this.id, 'resize', {\n                height: this.height || 500,\n                width: this.width,\n            })\n\n        },\n    },\n\n\n    \n}\n</script>"]}]}